# PECmd

## PECmd Introduction

PECmd is a tool created by Eric Zimmerman used to parse Windows Prefetch files (.pf), which can be located at `C:\Windows\Prefetch`.

### PECmd Use Cases

#### Law Enforcement

For those in Law Enforcement, this tool is useful for parsing Prefetch files which can help provide evidence of program execution. This may be useful in situations where crimes are being investigated that involve media players and photo viewers. Historical run times of the program can be useful in establishing a pattern of activity relating to application use.

#### Private Sector

For those in the Private Sector, this tool is useful for parsing Prefetch files which can help provide evidence of execution of suspicious applications used by a threat actor during a period of unauthorized access.

<!-- TODO: need to expand this -->

{pagebreak}

## PECmd Switches

In a PowerShell window, running `.\PECmd.exe` will provide the following options when running PECmd:

{line-numbers:false}
```powershell
  -f <f>           File to process. Either this or -d is required
  -d <d>           Directory to recursively process. Either this or -f is required
  -k <k>           Comma separated list of keywords to highlight in output. By default, 'temp' and
                   'tmp' are highlighted. Any additional keywords will be added to these
  -o <o>           When specified, save prefetch file bytes to the given path. Useful to look at
                   decompressed Win10 files
  -q               Do not dump full details about each file processed. Speeds up processing when
                   using --json or --csv [default: False]
  --json <json>    Directory to save JSON formatted results to. Be sure to include the full path
                   in double quotes
  --jsonf <jsonf>  File name to save JSON formatted results to. When present, overrides default
                   name
  --csv <csv>      Directory to save CSV formatted results to. Be sure to include the full path in
                   double quotes
  --csvf <csvf>    File name to save CSV formatted results to. When present, overrides default name
  --html <html>    Directory to save xhtml formatted results to. Be sure to include the full path
                   in double quotes
  --dt <dt>        The custom date/time format to use when displaying time stamps. See
                   https://goo.gl/CNVq0k for options [default: yyyy-MM-dd HH:mm:ss]
  --mp             When true, display higher precision for timestamps [default: False]
  --vss            Process all Volume Shadow Copies that exist on drive specified by -f or -d
                   [default: False]
  --dedupe         Deduplicate -f or -d & VSCs based on SHA-1. First file found wins [default:
                   False]
  --debug          Show debug information during processing [default: False]
  --trace          Show trace information during processing [default: False]
  --version        Show version information
  -?, -h, --help   Show help and usage information
```

{pagebreak}

### Switch Descriptions

#### `-k`

This switch informs the tool to highlight a list of keywords (comma separated)

Example: `.\PECmd.exe -f "C:\temp\prefetch\TIMELINEEXPLORER.EXE-959F92B3.pf" -k timeline,explorer`

Within the results, one can see the `(Keyword True)` appended to the end of a line where the specified keyword appears:

{line-numbers:false}
```powershell
19: \VOLUME{01d7b51f5d5ed7cd-b45d68a4}\USERS\CFUSER\ONEDRIVE
20: \VOLUME{01d7b51f5d5ed7cd-b45d68a4}\USERS\CFUSER\ONEDRIVE\DESKTOP
21: \VOLUME{01d7b51f5d5ed7cd-b45d68a4}\USERS\CFUSER\ONEDRIVE\DESKTOP\EZ TOOLS
22: \VOLUME{01d7b51f5d5ed7cd-b45d68a4}\USERS\CFUSER\ONEDRIVE\DESKTOP\EZ TOOLS\NET6
23: \VOLUME{01d7b51f5d5ed7cd-b45d68a4}\USERS\CFUSER\ONEDRIVE\DESKTOP\EZ TOOLS\NET6\TIMELINEEXPLORER (Keyword True)
```

#### `-o`

This switch informs the tool to output the decompressed bytes of the Prefetch file to a specified location. Please note, this works in Windows 10 and newer as those operating systems compress Prefetch files.

Example: `.\PECmd.exe -f "C:\temp\prefetch\TIMELINEEXPLORER.EXE-959F92B3.pf" -o D:\Prefetch`

Please note, in the above example a binary file called `Prefetch` will be output to the root of the D:\ drive. Do not expect PECmd to output the bytes as a binary file into the D:\Prefetch folder.

#### `--mp`

This switch will instruct PECmd to provide more verbose timestamps. For instance, running `.\PECmd.exe -f "C:\temp\prefetch\TIMELINEEXPLORER.EXE-959F92B3.pf" --mp` resulted in the following:

{line-numbers:false}
```powershell
Created on: 2022-05-28 03:22:25.3924904
Modified on: 2022-07-08 12:42:40.1435546
Last accessed on: 2022-09-09 03:03:13.7696931
```

Running `.\PECmd.exe -f "C:\temp\prefetch\TIMELINEEXPLORER.EXE-959F92B3.pf"` resulted in the following:

{line-numbers:false}
```powershell
Created on: 2022-05-28 03:22:25
Modified on: 2022-07-08 12:42:40
Last accessed on: 2022-09-09 03:03:23
```

#### `--vss`

This switch informs the tool to mount Volume Shadow Copies from the drive letter specified using the `-f` or `-d` switch and parse Prefetch files present within.

Example: `.\PECmd.exe -d "C:\temp\prefetch" --vss`

<!-- All other switches are covered by eztools_commonswitches.txt - 2022-09-15 -->

{pagebreak}

## PECmd Command Examples

### Example PECmd Commands

#### Parse a Prefetch file and output to the console window

{line-numbers:false}
```powershell
PECmd.exe -f "C:\Temp\CALC.EXE-3FBEF7FD.pf"
```

#### Parse a Prefetch file and output to formatted JSON to a specified location

{line-numbers:false}
```powershell
PECmd.exe -f "C:\Temp\CALC.EXE-3FBEF7FD.pf" --json "D:\jsonOutput" --jsonpretty
```

#### Parse a directory of Prefetch files and output to console window with specified keywords highlighted in the output

{line-numbers:false}
```powershell
PECmd.exe -d "C:\Temp" -k "system32, fonts"
```

#### Parse a directory of Prefetch and output to CSV to a specified location with the filename `foo.csv` and output to JSON to a specified location

{line-numbers:false}
```powershell
PECmd.exe -d "C:\Temp" --csv "c:\temp" --csvf foo.csv --json c:\temp\json
```

#### Parse a directory of Prefetch files

{line-numbers:false}
```powershell
PECmd.exe -d "C:\Windows\Prefetch"
```

{pagebreak}

## PECmd Output

### Analyzing PECmd Output - CSV

PECmd will output multiple CSVs with the following filenames:

`%timestamp%_PECmd_Output.csv`
`%timestamp%_PECmd_Output_Timeline.csv`

The timeline output will provide all of the entries from the PECmd output in a single timeline sorted on the run time stored within Prefetch.

{pagebreak}

### Analyzing PECmd Output - JSON

Here's an example of PECmd's JSON output:

```json
{
	"SourceFilename": "C:\\temp\\prefetch\\TIMELINEEXPLORER.EXE-959F92B3.pf",
	"SourceCreated": "2022-05-28 03:22:25",
	"SourceModified": "2022-07-08 12:42:40",
	"SourceAccessed": "2022-09-09 03:22:30",
	"ExecutableName": "TIMELINEEXPLORER.EXE",
	"Hash": "959F92B3",
	"Size": "447074",
	"Version": "Windows 10 or Windows 11",
	"RunCount": "24",
	"LastRun": "2022-07-08 12:42:38",
	"PreviousRun0": "2022-06-29 17:56:46",
	"PreviousRun1": "2022-06-28 13:06:32",
	"PreviousRun2": "2022-06-26 02:57:37",
	"PreviousRun3": "2022-06-22 18:12:52",
	"PreviousRun4": "2022-06-13 20:37:15",
	"PreviousRun5": "2022-06-11 20:57:04",
	"PreviousRun6": "2022-06-10 17:50:59",
	"Volume0Name": "\\VOLUME{01d7b51f5d5ed7cd-b45d68a4}",
	"Volume0Serial": "B45D68A4",
	"Volume0Created": "2021-09-29 10:47:14",
	"Directories": TooManyToListHere
	"FilesLoaded": TooManyToListHere
	"ParsingError": false
```

### Analyzing PECmd Output - HTML

PECmd's JSON output will be very similar to the JSON output, except in an HTML file.

## PECmd Key Takeaways

### Important Data Points

Prefetch files can store multiple run times for a single executable. This can help track historical execution of a file of interest.

{pagebreak}

## PECmd References

### Associated GitHub Repositories

* <https://github.com/EricZimmerman/Prefetch> is the C# library for parsing Prefetch files
* <https://github.com/EricZimmerman/PECmd> is the Command Line wrapper for the Prefetch library

### Blog Posts

#### Official Blog Posts

Blog posts from Eric Zimmerman's blog, Binary Foray:

* [Windows Prefetch parser in C#](https://binaryforay.blogspot.com/2016/01/windows-prefetch-parser-in-c.html)
* [Introducing PECmd!](https://binaryforay.blogspot.com/2016/01/introducing-pecmd.html)
* [PECmd v0.6.0.0 released](https://binaryforay.blogspot.com/2016/01/pecmd-v0600-released.html)
* [PECmd, LECmd, and JLECmd updated!](https://binaryforay.blogspot.com/2016/03/pecmd-lecmd-and-jlecmd-updated.html)

#### Community Resources

* [Prefetch Forensics](https://or10nlabs.tech/prefetch-forensics/)
* [Forensic Investigation : Prefetch File](https://www.hackingarticles.in/forensic-investigation-prefetch-file/)
* [DFIR Playbook - Windows Forensics(WIP APR21)](https://angry-bender.github.io/blog/WIP_Windows_Artefacts/#prefetch-files)

### Download PECmd

PECmd can be downloaded from <https://ericzimmerman.github.io/#!index.md>

### PECmd Sample Data

Sample Prefetch artifacts can be found at the [DFIRArtifactMuseum](https://github.com/AndrewRathbun/DFIRArtifactMuseum/tree/main/Windows/Prefetch).
