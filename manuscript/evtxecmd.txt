# EvtxECmd

## EvtxECmd Introduction

EvtxECmd is a tool created by Eric Zimmerman used to parse event logs from Windows. Versions of Windows from Vista and beyond have utilized the .evtx format, which incorporates XML payloads within the .evtx files. EvtxECmd only parses .evtx files, so if you're dealing with .evt files, EvtxECmd will not parse those particular files.

### EvtxECmd Use Cases

#### Law Enforcement

For those in Law Enforcement, this tool is useful for parsing event logs which can provide useful program execution artifacts, NTFS file system artifacts, evidence of USB device connections, and much more.

#### Private Sector

For those in the Private Sector, this tool is useful for parsing event logs which can provide useful artifacts relating to RDP sessions, account lockouts, failed logons, and much more.

<!-- TODO: need to expand this -->

{pagebreak}

### EvtxECmd Maps

<https://github.com/EricZimmerman/evtx/tree/master/evtx/Maps>

#### Creating EvtxECmd Maps

If you are looking for guidance on how to create EvtxECmd Maps, look no further than the following resources:

* [EvtxECmd Maps Guide](https://github.com/EricZimmerman/evtx/blob/master/evtx/Maps/!Channel-Name_Provider-Name_EventID.guide)
* [EvtxECmd Maps Template](https://github.com/EricZimmerman/evtx/blob/master/evtx/Maps/!Channel-Name_Provider-Name_EventID.template)

Additionally, please check out Andrew Rathbun's 2021 SANS DFIR Summit presentation on EZ Tools/KAPE: How to Contribute to and Benefit from Open Source Contributions. Click [here](https://youtu.be/mIb1GQP3ciE?t=860) for a timestamped link to the section of the presentation that relates to EvtxECmd Maps.

## EvtxECmd Switches

In a PowerShell window, running `.\EvtxECmd.exe` will provide the following options when running EvtxECmd:

{line-numbers:false}
```powershell
  -f <f>           File to process. This or -d is required
  -d <d>           Directory to process that contains evtx files. This or -f is required
  --csv <csv>      Directory to save CSV formatted results to
  --csvf <csvf>    File name to save CSV formatted results to. When present, overrides default name
  --json <json>    Directory to save JSON formatted results to
  --jsonf <jsonf>  File name to save JSON formatted results to. When present, overrides default name
  --xml <xml>      Directory to save XML formatted results to
  --xmlf <xmlf>    File name to save XML formatted results to. When present, overrides default name
  --dt <dt>        The custom date/time format to use when displaying time stamps [default: yyyy-MM-dd HH:mm:ss.fffffff]
  --inc <inc>      List of Event IDs to process. All others are ignored. Overrides --exc Format is 4624,4625,5410
  --exc <exc>      List of Event IDs to IGNORE. All others are included. Format is 4624,4625,5410
  --sd <sd>        Start date for including events (UTC). Anything OLDER than this is dropped. Format should match --dt
  --ed <ed>        End date for including events (UTC). Anything NEWER than this is dropped. Format should match --dt
  --fj             When true, export all available data when using --json [default: False]
  --tdt <tdt>      The number of seconds to use for time discrepancy detection [default: 1]
  --met            When true, show metrics about processed event log [default: True]
  --maps <maps>    The path where event maps are located. Defaults to 'Maps' folder where program was executed
                   [default: C:\Users\CFUser\OneDrive - Kroll\Desktop\EZ Tools\net6\EvtxeCmd\Maps]
  --vss            Process all Volume Shadow Copies that exist on drive specified by -f or -d [default: False]
  --dedupe         Deduplicate -f or -d & VSCs based on SHA-1. First file found wins [default: True]
  --sync           If true, the latest maps from https://github.com/EricZimmerman/evtx/tree/master/evtx/Maps are
                   downloaded and local maps updated [default: False]
  --debug          Show debug information during processing [default: False]
  --trace          Show trace information during processing [default: False]
  --version        Show version information
  -?, -h, --help   Show help and usage information
```

{pagebreak}

### Switch Descriptions

#### `--inc`

This switch will provide EvtxECmd with which event ID(s) to process.

Example: `.\EvtxECmd.exe -d C:\Windows\System32\winevt\Logs --inc 4624,4625`

The above command WILL process 4624 and 4625 events, but will NOT process anything else.

#### `--exc`

This switch will provide EvtxECmd with which event ID(s) to ignore during process.

Example: `.\EvtxECmd.exe -d C:\Windows\System32\winevt\Logs --exc 4624,4625`

The above command will NOT process 4624 and 4625 events, but will process everything other event.

#### `--sd`

This switch will provide a starting date for which EvtxECmd will process all events that have occurred AFTER that date.

Example: `.\EvtxECmd.exe -f "C:\Windows\System32\winevt\Logs\Microsoft-Windows-SmbClient%4Security.evtx" --csv D:\ --sd "2022-07-29 00:00:00.0000000"`

Not using quotes around the timestamp may cause issues.

#### `--ed`

This switch will provide a starting date for which EvtxECmd will process all events that have occurred BEFORE that date.

Example: `.\EvtxECmd.exe -f "C:\Windows\System32\winevt\Logs\Microsoft-Windows-SmbClient%4Security.evtx" --csv D:\ --ed "2022-07-27 00:00:00.0000000"`

Not using quotes around the timestamp may cause issues.

#### `--fj`

This switch will include full details when using the common `--json` switch.

Example: `.\EvtxECmd.exe -d "C:\Users\CFUser\Downloads\EventLogs\logs" --json "C:\Users\CFUser\Downloads\EventLogs\logs\json" --fj`

#### `--tdt`

This switch informs the tool with the number of seconds to look for when searching for time discrepancy detection.

Example: `EvtxECmd.exe -f "C:\Temp\Application.evtx" --csv "c:\temp\out" --tdt 5`

#### `--met`

This switch informs the tool as to whether or not to provide statistics, with the default being true.

Example: `EvtxECmd.exe -f "C:\Temp\Application.evtx" --csv "c:\temp\out" --met false`

With `--met false`, the following statistics will NOT be displayed after each .evtx file that is parsed by EvtxECmd:

```
Metrics (including dropped events)
Event ID        Count
300             1
400             666
403             404
600             4,939
800             197
```

By default, the above statistics will be displayed after each .evtx file is parsed by EvtxECmd.

#### `--maps‘

This switch will inform the tool to look for EvtxECmd Maps at a specified location other than `.\EvtxECmd\Maps`.

Example: `.\EvtxECmd.exe -d "D:\evtx" --csv "D:\evtx" --maps "D:\Maps"`

#### `--vss`

This switch informs the tool to mount Volume Shadow Copies from the drive letter specified using the `-f` or `-d` switch and parse Prefetch files present within.

Example: `.\EvtxECmd.exe -d "D:\evtx" --csv "D:\evtx" --vss`

#### `--sync‘

This switch will inform the tool to download all EvtxECmd Maps from [GitHub](https://github.com/EricZimmerman/evtx/tree/master/evtx/Maps) and update the local Maps stored in `.\EvtxECmd\Maps`.

Example: `.\EvtxECmd.exe --sync`

<!-- All other switches are covered by eztools_commonswitches.txt - 2022-09-15 -->

{pagebreak}

## EvtxECmd Command Examples

### Example EvtxECmd Commands

#### Parse a single .evtx file and output to CSV to a specified location with a specified output filename

{line-numbers:false}
```powershell
EvtxECmd.exe -f "C:\Temp\Application.evtx" --csv "c:\temp\out" --csvf MyOutputFile.csv
```

#### Parse a single .evtx file and output to CSV to a specified location

{line-numbers:false}
```powershell
EvtxECmd.exe -f "C:\Temp\Application.evtx" --csv "c:\temp\out"
```

#### Parse a single .evtx file and output to JSON to a specified location

{line-numbers:false}
```powershell
EvtxECmd.exe -f "C:\Temp\Application.evtx" --json "c:\temp\jsonout"
```

{pagebreak}

## EvtxECmd Output

### Analyzing EvtxECmd Output - JSON

When executing EvtxECmd with JSON output enabled, you will see similar output to the example below:

```json
{
	"ChunkNumber": 0,
	"Computer": "HostnameGoesHere",
	"Payload": "{\"EventData\":{\"Data\":[{\"@Name\":\"param1\",\"#text\":\"86400\"},{\"@Name\":\"param2\",\"#text\":\"SuppressDuplicateDuration\"},{\"@Name\":\"param3\",\"#text\":\"Software\\\\Microsoft\\\\EventSystem\\\\EventLog\"}]}}",
	"Channel": "Application",
	"Provider": "Microsoft-Windows-EventSystem",
	"EventId": 4625,
	"EventRecordId": "1",
	"ProcessId": 0,
	"ThreadId": 0,
	"Level": "Info",
	"Keywords": "0x80000000000000",
	"SourceFile": "C:\\temp\\evtx\\Application.evtx",
	"ExtraDataOffset": 0,
	"HiddenRecord": false,
	"TimeCreated": "2022-05-19T15:34:34.9710202+00:00",
	"RecordNumber": 1
},
```

{pagebreak}

### Analyzing EvtxECmd Output - XML

When executing EvtxECmd with XML output enabled, you will see similar output to the example below:

```xml
<Event>
	<System>
		<Provider Name="Microsoft-Windows-EventSystem" Guid="{899daace-4868-4295-afcd-9eb8fb497561}" EventSourceName="EventSystem" />
		<EventID Qualifiers="16384">4625</EventID>
		<Version>0</Version>
		<Level>4</Level>
		<Task>0</Task>
		<Opcode>0</Opcode>
		<Keywords>0x80000000000000</Keywords>
		<TimeCreated SystemTime="2022-05-19 15:34:34.9710202" />
		<EventRecordID>1</EventRecordID>
		<Correlation />
		<Execution ProcessID="0" ThreadID="0" />
		<Channel>Application</Channel>
		<Computer>CFL-HostnameGoesHere</Computer>
		<Security />
	</System>
	<EventData>
		<Data Name="param1">86400</Data>
		<Data Name="param2">SuppressDuplicateDuration</Data>
		<Data Name="param3">Software\Microsoft\EventSystem\EventLog</Data>
	</EventData>
</Event>
```

This is the preferred way to do research for creating new EvtxECmd Maps. EvtxECmd Maps use XPath queries which would require XML output to develop a working XPath query.

{pagebreak}

## EvtxECmd Key Takeaways

### Important Data Points

The Payload column will always have all the of XML data stored within a given event log. The columns where data from the XML Payload are mapped to should be considered the highlights of that particular event, but given that there are only 6 PayloadData columns, some events naturally will have more than 6 relevant data points.

{pagebreak}

## EvtxECmd References

### Associated GitHub Repositories

* <https://github.com/EricZimmerman/evtx> is the GitHub repository for EvtxECmd

### Blog Posts

#### Official Blog Posts

Blog posts from Eric Zimmerman's blog, Binary Foray:

* [Introducing EvtxECmd!!](https://binaryforay.blogspot.com/2019/04/introducing-evtxecmd.html)

#### Community Resources

* [Enhancing Event Log Analysis with EvtxEcmd using KAPE](https://www.youtube.com/watch?v=BIkyWexMF0I)

### Download EvtxECmd

EvtxECmd can be downloaded from <https://ericzimmerman.github.io/#!index.md>

### Event Log Sample Data

Sample Event Log artifacts can be found at the [DFIRArtifactMuseum](https://github.com/AndrewRathbun/DFIRArtifactMuseum/tree/main/Windows/EventLogs).
