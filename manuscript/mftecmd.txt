# MFTECmd

## MFTECmd Introduction

MFTECmd is a tool created by Eric Zimmerman used to parse various NTFS metadata artifacts, including but not limited to the $MFT, $J, $Boot, $SDS, and $I30 files.

### MFTECmd Use Cases

#### Law Enforcement

For those in Law Enforcement, this tool is useful for parsing NTFS metadata files that can provide invaluable information relating to the files that currently exist, previously existed, and what changes have occurred to those files and at what time. The $MFT should be examined in nearly every instance as that will provide insight as to which files and folders exist on a system currently. The $J should be examined in nearly every instance as it will provide insight as to which files changed in which ways, including but not limited to file creations, file deletions, file renames, etc. The $I30 can provide insight into folders that no longer exist on a system.

#### Private Sector

For those in the Private Sector, this tool is useful for parsing NTFS metadata files that can provide invaluable information relating to the files that currently exist, previously existed, and what changes have occurred to those files and at what time. The $MFT can be useful in locating suspicious files and folders that were created by a threat actor during a period of unauthorized access. The $J can provide insight into files that no longer exist on disk and no longer have references within the $MFT, including but not limited to threat actor tool output or evidence of malicious executables that were deleted after being executed.

<!-- TODO: need to expand this -->

{pagebreak}

## MFTECmd Switches

In a PowerShell window, running `.\MFTECmd.exe` will provide the following options when running MFTECmd:

{line-numbers:false}
```powershell
Description:
  MFTECmd version 1.2.1.0

  Author: Eric Zimmerman (saericzimmerman@gmail.com)
  https://github.com/EricZimmerman/MFTECmd

  Examples: MFTECmd.exe -f "C:\Temp\SomeMFT" --csv "c:\temp\out" --csvf MyOutputFile.csv
            MFTECmd.exe -f "C:\Temp\SomeMFT" --csv "c:\temp\out"
            MFTECmd.exe -f "C:\Temp\SomeMFT" --json "c:\temp\jsonout"
            MFTECmd.exe -f "C:\Temp\SomeMFT" --body "c:\temp\bout" --bdl c
            MFTECmd.exe -f "C:\Temp\SomeMFT" --de 5-5

            Short options (single letter) are prefixed with a single dash. Long commands are prefixed
  with two dashes

Usage:
  MFTECmd [options]

Options:
  -f <f>           File to process ($MFT | $J | $Boot | $SDS | $I30). Required
  -m <m>           $MFT file to use when -f points to a $J file (Use this to resolve parent path
                   in $J CSV output).
  --json <json>    Directory to save JSON formatted results to. This or --csv required unless --de
                   or --body is specified
  --jsonf <jsonf>  File name to save JSON formatted results to. When present, overrides default
                   name
  --csv <csv>      Directory to save CSV formatted results to. This or --json required unless --de
                   or --body is specified
  --csvf <csvf>    File name to save CSV formatted results to. When present, overrides default name
  --body <body>    Directory to save bodyfile formatted results to. --bdl is also required when
                   using this option
  --bodyf <bodyf>  File name to save body formatted results to. When present, overrides default
                   name
  --bdl <bdl>      Drive letter (C, D, etc.) to use with bodyfile. Only the drive letter itself
                   should be provided
  --blf            When true, use LF vs CRLF for newlines [default: False]
  --dd <dd>        Directory to save exported FILE record. --do is also required when using this
                   option
  --do <do>        Offset of the FILE record to dump as decimal or hex. Ex: 5120 or 0x1400 Use
                   --de or --debug to see offsets
  --de <de>        Dump full details for entry/sequence #. Format is 'Entry' or 'Entry-Seq' as
                   decimal or hex. Example: 5, 624-5 or 0x270-0x5.
  --dr             When true, dump resident files to dir specified by --csv, in 'Resident'
                   subdirectory. Files will be named
                   '<EntryNumber>-<SequenceNumber>_<FileName>.bin'
  --fls            When true, displays contents of directory specified by --de. Ignored when --de
                   points to a file [default: False]
  --ds <ds>        Dump full details for Security Id as decimal or hex. Example: 624 or 0x270
  --dt <dt>        The custom date/time format to use when displaying time stamps. See
                   https://goo.gl/CNVq0k for options [default: yyyy-MM-dd HH:mm:ss.fffffff]
  --sn             Include DOS file name types [default: False]
  --fl             Generate condensed file listing. Requires --csv [default: False]
  --at             When true, include all timestamps from 0x30 attribute vs only when they differ
                   from 0x10 [default: False]
  --rs             When true, recover slack space from FILE records when processing MFT files.
                   This option has no effect for $I30 files [default: False]
  --vss            Process all Volume Shadow Copies that exist on drive specified by -f [default:
                   False]
  --dedupe         Deduplicate -f & VSCs based on SHA-1. First file found wins [default: False]
  --debug          Show debug information during processing [default: False]
  --trace          Show trace information during processing [default: False]
  --version        Show version information
  -?, -h, --help   Show help and usage information


-f is required. Exiting
```

{pagebreak}

### Switch Descriptions

#### `-m`

This switch informs the tool to parse an $MFT along with its associated $J. The main benefit for this is the resolution of the Parent Path column in the $J output, which will save examiners from having to manually cross reference the Parent Entry ID in the $MFT to the one associated with a change recorded in the $J. This is absolutely worth the extra effort.

Example: `.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\J\Win10\APTSimulatorVM\$J' -m 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\MFT\Win10\APTSimulatorVM\$MFT' --csv "C:\temp"`

#### `--body`

This switch informs the tool to output to a [bodyfile](https://forensicswiki.xyz/wiki/index.php?title=Bodyfile). Please note, the `--bdl` switch is required when using `--bdl`.

Example: `.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\MFT\Win10\APTSimulatorVM\$MFT' --body C:\temp --bdl C`

#### `--bodyf`

This switch informs the tool to name the bodyfile output a specified filename.

Example: `.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\MFT\Win10\APTSimulatorVM\$MFT' --body C:\temp --bdl C --bodyf test`

The above command will output a file named `test`.

#### `--bdl`

This switch informs the tool to use a specified drive letter when providing output to bodyfile format.

Example: `.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\MFT\Win10\APTSimulatorVM\$MFT' --body C:\temp --bdl C`

#### `--blf`

This switch informs the tool to use LF instead of CRLF for line endings in . More information about LF vs. CRLF can be found [here](https://www.aleksandrhovhannisyan.com/blog/crlf-vs-lf-normalizing-line-endings-in-git/).

Example: `.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\MFT\Win10\APTSimulatorVM\$MFT' --csv "C:\temp" --blf`

#### `--dd`

This switch informs the tool to save an exported FILE record to a specified directory. Please note, the `--do` switch is required when using `--dd`.

Example: `.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\MFT\Win10\APTSimulatorVM\$MFT' --dd C:\temp --do 679`

#### `--do`

This switch informs the tool of which decimal or hex offset to dump to a specified location.

Example: `.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\MFT\Win10\APTSimulatorVM\$MFT' --dd C:\temp --do 679`

#### `--de`

This switch informs the tool to dump the full details of a specific entry number.

Example: `.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\MFT\Win10\APTSimulatorVM\$MFT' --de 679`

#### `--dr`

This switch informs the tool to dump all files resident within the $MFT to a specified directory. Please note, the specified directory will be whatever is specified for the `--csv` switch.

Example: `.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\MFT\Win10\APTSimulatorVM\$MFT' --csv c:\temp --dr`

#### `--fls`

This switch informs the tool to display the contents of a folder based on the data stored within the $MFT.

Example: `.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\MFT\Win10\APTSimulatorVM\$MFT' --de 500 --fls`

The above command will display results similar to below:

```
Contents for .\Program Files\WindowsApps\Microsoft.WebMediaExtensions_1.0.42192.0_x64__8wekyb3d8bbwe\microsoft.system.package.metadata

Key                     Type            Name
115558-4                File            resources.ae44601c.pri
115558-4                File            S-1-5-21-2212929841-2730996645-2649195864-1000-MergedResources-1.pri
```

Removing the `--fls` switch would display the timestamps and other NTFS metadata stored about that directory within the $MFT.

#### `--ds`

This switch informs the tool to provide information about the specified security descriptor.

Example: `.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\Secure_$SDS\Win10\APTSimulatorVM\$Secure_$SDS' --ds 256`

The above command would yield the following output:

```
Command line: -f D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\Secure_$SDS\Win10\APTSimulatorVM\$Secure_$SDS --ds 256

File type: Sds


Processed D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\Secure_$SDS\Win10\APTSimulatorVM\$Secure_$SDS in 0.0042 seconds

SDS entries found in D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\Secure_$SDS\Win10\APTSimulatorVM\$Secure_$SDS: 4,626

Details for security record # 256 (0x100), Found in D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\Secure_$SDS\Win10\APTSimulatorVM\$Secure_$SDS
Hash value: CBC6FE32, Offset: 0x0
Control flags: SeDaclPresent | SeSelfRelative

Owner SID: S-1-5-18: An account that is used by the operating system.
Group SID: S-1-5-32-544: A built-in group. After the initial installation of the operating system, the only member of the group is the Administrator account. When a computer joins a domain, the Domain Administrators group is added to the Administrators group. When a server becomes a domain controller, the Enterprise Administrators group also is added to the Administrators group.

Discretionary Access Control List
ACE record count: 2
ACL type: Discretionary

------------ Ace record #0 ------------
Type: AccessAllowed
Flags: None
Mask: FileReadDirList | ReadEa | ReadAttrs | ReadControl | Synchronize
SID: S-1-5-18: An account that is used by the operating system.

------------ Ace record #1 ------------
Type: AccessAllowed
Flags: None
Mask: FileReadDirList | ReadEa | ReadAttrs | ReadControl | Synchronize
SID: S-1-5-32-544: A built-in group. After the initial installation of the operating system, the only member of the group is the Administrator account. When a computer joins a domain, the Domain Administrators group is added to the Administrators group. When a server becomes a domain controller, the Enterprise Administrators group also is added to the Administrators group.
```

#### `--sn`

This switch informs the tool to include DOS file names as well as a few other columns of output.

Example: `.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\MFT\Win10\APTSimulatorVM\$MFT' --csv C:\temp --sn`

The above command output a 191MB CSV compared to 122MB without the `--sn` switch. Also, the above command adds the following columns within Timeline Explorer that are available in the Column Chooser (right-click on a column header and double click on them to add them in).

![mftecmdSNswitchcolumnsTLE](mftecmd\mftecmdSNswitchcolumnsTLE.jpg)

#### `--fl`

This switch informs the tool to output a simple file listing of the contents of the $MFT parsed which will include the following columns: FullPath, Extension, IsDirectory, FileSize, Created0x10, and LastModified0x10.

Example: `.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\MFT\Win10\APTSimulatorVM\$MFT' --csv C:\temp --fl`

#### `--at`

This switch informs the tool to display the timestamps even when the 0x10 and 0x30 timestamps are identical. Normally, the 0x30 timestamps would be empty if they're identical to the 0x10 timestamps for the purpose of making anomalies easier to spot.

Example: `.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\MFT\Win10\APTSimulatorVM\$MFT' --csv C:\temp --at`

#### `--rs`

This switch informs the tool to attempt to recover slack space from FILE records.

Example: `.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\MFT\Win10\APTSimulatorVM\$MFT' --csv C:\temp --rs`

<!-- All other switches are covered by eztools_commonswitches.txt - 2022-09-15 -->

{pagebreak}

## MFTECmd Command Examples

### Example MFTECmd Commands

#### Parse a $MFT and output to CSV to a specified location and name the output file MyOutputFile.csv

{line-numbers:false}
```powershell
MFTECmd.exe -f "C:\Temp\SomeMFT" --csv "c:\temp\out" --csvf MyOutputFile.csv
```

#### Parse a $MFT and output to CSV to a specified location

{line-numbers:false}
```powershell
MFTECmd.exe -f "C:\Temp\SomeMFT" --csv "c:\temp\out"
```

#### Parse a $MFT and output to JSON to a specified location

{line-numbers:false}
```powershell
MFTECmd.exe -f "C:\Temp\SomeMFT" --json "c:\temp\jsonout"
```

#### Parse a $MFT and output to bodyfile for the C:\ drive

{line-numbers:false}
```powershell
MFTECmd.exe -f "C:\Temp\SomeMFT" --body "c:\temp\bout" --bdl c
```

#### Parse a $MFT and dump the full details for entry number 5, sequence number 5 to the console

{line-numbers:false}
```powershell
MFTECmd.exe -f "C:\Temp\SomeMFT" --de 5-5
```
#### Parse $Boot and output to console

{line-numbers:false}
```powershell
.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\Boot\Win10\APTSimulatorVM\$Boot'
```

#### Parse $SDS and output to CSV to a specified location

{line-numbers:false}
```powershell
.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\Secure_$SDS\Win10\APTSimulatorVM\$Secure_$SDS' --csv C:\temp
```

#### Parse $I30 and output to CSV to a specified location

{line-numbers:false}
```powershell
.\MFTECmd.exe -f 'D:\DFIRArtifactMuseum\Windows\NTFSArtifacts\$I30\EricZimmerman\SecondDelete\$I30' --csv c:\temp
```

{pagebreak}

## MFTECmd Output

### Analyzing MFTECmd Output - CSV

MFTECmd output provides a few important data points that are not native to NTFS metadata files but are still very helpful to examiners.

When parsing the $MFT, output provided will contain three data points unique to MFTECmd:

![mftecmd3columns](mftecmd\mftecmd3columns.jpg)

#### SI < FN

`SI < FN` can be translated to Standard Information (0x10) Attribute timestamp is less than (aka earlier than) the File Name (0x30) Attribute timestamp. This is meant to point out a potential indicator of timestomping occuring on the volume being analyzed. Learn more about timestomping [here](https://www.kroll.com/en/insights/publications/cyber/anti-forensic-tactics/anti-forensics-tactics-timestomping) and [here](https://www.inversecos.com/2022/04/defence-evasion-technique-timestomping.html).

#### u Sec Zeros

`u Sec Zeros` indicates that the subseconds of a timestamp has been zeroed out. An example of a zeroed out subsecond value would be 2022-12-34 12:34:56.0000000. Prior to being timestomped, that timestamp likely looked similar to this: 2022-12-34 12:34:56.1234567 where the subsecond values were not zeroed out.

#### Copied

`Copied` indicates that the Last Modified timestamp value occurs before the Creation timestamp of a given file or folder. How can this be? During a file copy operation, the file being copied's Creation timestamp is untouched but the Last Modified timestamp will reflect the time of file copy. This can often result in a file showing as being modified before it existed, which is impossible. MFTECmd recognizes this and will provide an indicator in this `Copied` column as to whether or not the timestamps indicate such a file copy operation may have occurred.

{pagebreak}

### Analyzing MFTECmd Output - JSON

Executing MFTECmd with JSON output enabled will provide results similar to the example below:

```json
{
	"EntryNumber": 0,
	"SequenceNumber": 1,
	"ParentEntryNumber": 5,
	"ParentSequenceNumber": 5,
	"InUse": true,
	"ParentPath": ".",
	"FileName": "$MFT",
	"Extension": "",
	"IsDirectory": false,
	"HasAds": false,
	"IsAds": false,
	"FileSize": 274202624,
	"Created0x10": "2022-03-10T19:30:21.3503859+00:00",
	"LastModified0x10": "2022-03-10T19:30:21.3503859+00:00",
	"LastRecordChange0x10": "2022-03-10T19:30:21.3503859+00:00",
	"LastAccess0x10": "2022-03-10T19:30:21.3503859+00:00",
	"UpdateSequenceNumber": 0,
	"LogfileSequenceNumber": 960937622,
	"SecurityId": 256,
	"SiFlags": 6,
	"ReferenceCount": 1,
	"NameType": 3,
	"Timestomped": false,
	"uSecZeros": false,
	"Copied": false,
	"FnAttributeId": 3,
	"OtherAttributeId": 6
},
```

{pagebreak}

### Analyzing MFTECmd Output - Body

Executing MFTECmd with bodyfile output enabled will provide results similar to the example below:

```
0|c:/$MFT|0-128-6|r/rrwxrwxrwx|0|0|274202624|1646940621|1646940621|1646940621|1646940621
0|c:/$MFT ($FILE_NAME)|0-48-3|r/rrwxrwxrwx|0|0|274202624|1646940621|1646940621|1646940621|1646940621
0|c:/$MFTMirr|1-128-1|r/rrwxrwxrwx|0|0|4096|1646940621|1646940621|1646940621|1646940621
0|c:/$MFTMirr ($FILE_NAME)|1-48-2|r/rrwxrwxrwx|0|0|4096|1646940621|1646940621|1646940621|1646940621
0|c:/$LogFile|2-128-1|r/rrwxrwxrwx|0|0|67108864|1646940621|1646940621|1646940621|1646940621
0|c:/$LogFile ($FILE_NAME)|2-48-2|r/rrwxrwxrwx|0|0|67108864|1646940621|1646940621|1646940621|1646940621
0|c:/$Volume|3-128-3|r/rrwxrwxrwx|0|0|0|1646940621|1646940621|1646940621|1646940621
0|c:/$Volume ($FILE_NAME)|3-48-1|r/rrwxrwxrwx|0|0|0|1646940621|1646940621|1646940621|1646940621
0|c:/$AttrDef|4-128-1|r/rrwxrwxrwx|0|0|2560|1646940621|1646940621|1646940621|1646940621
0|c:/$AttrDef ($FILE_NAME)|4-48-2|r/rrwxrwxrwx|0|0|2560|1646940621|1646940621|1646940621|1646940621
```

{pagebreak}

## File Types Parsed by MFTECmd

### #SDS

$SDS contains a list of all the security descriptors on a given volume. Learn more about the $SDS [here](https://www.ntfs.com/ntfs-permissions-file-structure.htm).

### $Boot

$Boot is the NTFS metadata file for the NTFS Partition Boot Sector. Learn more about the $Boot [here](https://www.ntfs.com/ntfs-partition-boot-sector.htm).

### $MFT

$MFT contains metadata about every file and folder on an NTFS volume within FILE records. Learn more about the $MFT [here](https://www.ntfs.com/ntfs-mft.htm).

### $J

$J tracks changes that were made to files and folders on an NTFS volume. Learn more about the $J [here](https://en.wikipedia.org/wiki/USN_Journal).

### $I30

$I30 files can provide insight into deleted and overwritten files. Learn more about $I30 files [here](https://www.sans.org/blog/ntfs-i30-index-attributes-evidence-of-deleted-and-overwritten-files/#:~:text=Interestingly%2C%20NTFS%20directory%20index%20entries%20utilize%20a%20%24FILE_NAME,trove%20of%20information%20about%20the%20file%3A%20Full%20filename).

{pagebreak}

## MFTECmd References

### Associated GitHub Repositories

* <https://github.com/EricZimmerman/MFT> is the C# library for parsing $MFT files
* <https://github.com/EricZimmerman/MFTECmd> is the Command Line wrapper for the MFT library

### Blog Posts

#### Official Blog Posts

Blog posts from Eric Zimmerman's blog, Binary Foray:

* <https://binaryforay.blogspot.com/2018/06/introducing-mftecmd.html>
* <https://binaryforay.blogspot.com/2018/06/mftecmd-v0260-released.html>
* <https://binaryforay.blogspot.com/2018/12/mftecmd-0360-released.html>
* <https://binaryforay.blogspot.com/2019/01/locked-file-support-added-to.html>

#### Community Resources

* <https://aboutdfir.com/toolsandartifacts/windows/mft-explorer-mftecmd/>
* <https://www.youtube.com/watch?v=1mwiShxREm8>
* <https://www.youtube.com/watch?v=_qElVZJqlGY>
* <https://github.com/AndrewRathbun/DFIRPowerShellScripts/blob/main/MFTECmd%24J%24MFTParser.ps1>

### Download MFTECmd

MFTECmd can be downloaded from <https://ericzimmerman.github.io/#!index.md>

### NTFS Sample Data

Sample NTFS artifacts can be found at the [DFIRArtifactMuseum](https://github.com/AndrewRathbun/DFIRArtifactMuseum/tree/main/Windows/NTFSArtifacts).