# RECmd

## RECmd Introduction

RECmd is a tool created by Eric Zimmerman used to parse Registry hives. Registry hives are located at `C:\Windows\System32\config` and contain multiple hives of interest. 

{pagebreak}

## RECmd Switches

In a PowerShell window, running `.\RECmd.exe` will provide the following options when running JLECmd:

{line-numbers:false}
```powershell
RECmd version 2.0.0.0

Author: Eric Zimmerman (saericzimmerman@gmail.com)
https://github.com/EricZimmerman/RECmd

Note: Enclose all strings containing spaces (and all RegEx) with double quotes

Command line:

Description:
  RECmd version 2.0.0.0

  Author: Eric Zimmerman (saericzimmerman@gmail.com)
  https://github.com/EricZimmerman/RECmd

  Note: Enclose all strings containing spaces (and all RegEx) with double quotes

  Example: RECmd.exe --f "C:\Temp\UsrClass 1.dat" --sk URL --recover false --nl
             RECmd.exe --f "D:\temp\UsrClass 1.dat" --StartDate "11/13/2014 15:35:01"
             RECmd.exe --f "D:\temp\UsrClass 1.dat" --RegEx --sv "(App|Display)Name"

Usage:
  RECmd [options]

Options:
  -d <d>               Directory to look for hives (recursively). -f or -d is required
  -f <f>               Hive to search. -f or -d is required
  -q                   Quiet mode. When true, hide processing details [default: False]
  --kn <kn>            Display details for key name. Includes subkeys and values
  --vn <vn>            Value name. Only this value will be dumped
  --bn <bn>            Use settings from supplied file to find keys/values. See included sample
                       file for examples
  --csv <csv>          Directory to save CSV formatted results to. Required when -bn is used
  --csvf <csvf>        File name to save CSV formatted results to. When present, overrides default
                       name
  --saveTo <saveTo>    Saves --vn value data in binary form to file. Expects path to a FILE
  --json <json>        Export --kn to directory specified by --json. Ignored when --vn is specified
  --jsonf <jsonf>      When true, compress names for profile based hives.
  --details            Show more details when displaying results [default: False]
  --base64 <base64>    Find Base64 encoded values with size >= Base64 (specified in bytes)
  --minSize <minSize>  Find values with data size >= MinSize (specified in bytes)
  --sa <sa>            Search for <string> in keys, values, data, and slack
  --sk <sk>            Search for <string> in value record's key names
  --sv <sv>            Search for <string> in value record's value names
  --sd <sd>            Search for <string> in value record's value data
  --ss <ss>            Search for <string> in value record's value slack
  --literal            If true, --sd and --ss search value will not be interpreted as ASCII or
                       Unicode byte strings [default: False]
  --nd                 If true, do not show data when using --sd or --ss [default: False]
  --regex              If present, treat <string> in --sk, --sv, --sd, and --ss as a regular
                       expression [default: False]
  --dt <dt>            The custom date/time format to use when displaying time stamps [default:
                       yyyy-MM-dd HH:mm:ss.fffffff]
  --nl                 When true, ignore transaction log files for dirty hives [default: False]
  --recover            If true, recover deleted keys/values [default: False]
  --vss                Process all Volume Shadow Copies that exist on drive specified by -f or -d
                       [default: False]
  --dedupe             Deduplicate -f or -d & VSCs based on SHA-1. First file found wins [default:
                       False]
  --sync               If true, the latest batch files from
                       https://github.com/EricZimmerman/RECmd/tree/master/BatchExamples are
                       downloaded and local files updated [default: False]
  --debug              Show debug information during processing [default: False]
  --trace              Show trace information during processing [default: False]
  --version            Show version information
  -?, -h, --help       Show help and usage information

```

### Switch Descriptions

#### `-q`

This switch hides the processing details when running a command. This means potentially faster output since your computer doesn't have to worry about generating output to the console window during processing.

Example: `RECmd.exe -d C:\Windows\system32\config --bn BatchExamples\Kroll_Batch.reb --nl false --csv C:\temp -q`

#### `--kn`

This switch 

Example: 

#### `--vn`

This switch 

Example: 

#### `--bn`

This switch 

Example: 

#### `--saveTo`

This switch 

Example: 

#### `--details`

This switch 

Example: 

#### `--base64`

This switch 

Example: 

#### `--minSize`

This switch 

Example: 

#### --sa`

This switch 

Example: 

#### `--sk`

This switch 

Example: 

#### `--sv`

This switch 

Example: 

#### `--sd`

This switch 

Example: 

#### `--ss`

This switch 

Example: 

#### `--literal`

This switch 

Example: 

#### `--nd`

This switch 

Example: 

#### `--regex`

This switch 

Example: 

#### `--nl`

This switch 

Example: 

#### `--recover`

This switch 

Example: 

#### `--vss`

This switch 

Example:

#### `--dedupe`

This switch 

Example:

{pagebreak}

## RECmd Command Examples

### Example RECmd Commands

#### Example description here

{line-numbers:false}
```powershell
RECmd.exe --f "C:\Temp\UsrClass 1.dat" --sk URL --recover false --nl
```

#### Example description here

{line-numbers:false}
```powershell
RECmd.exe --f "D:\temp\UsrClass 1.dat" --StartDate "11/13/2014 15:35:01"
```

#### Example description here

{line-numbers:false}
```powershell
RECmd.exe --f "D:\temp\UsrClass 1.dat" --RegEx --sv "(App|Display)Name"
```

{pagebreak}

## RECmd Output

### Analyzing RECmd Output - Console

{pagebreak}

### Analyzing RECmd Output - CSV

{pagebreak}

### Analyzing RECmd Output - JSON

{pagebreak}

## RECmd Sample Output

{pagebreak}

## RECmd Key Takeaways

### Important Data Points

{pagebreak}

## RECmd References

### Associated GitHub Repositories

* <https://github.com/EricZimmerman/JumpList> is the C# library for parsing JumpList files 
* <https://github.com/EricZimmerman/OleCf> is the C# library for parsing OLE compound files, which Jump Lists are
* <https://github.com/EricZimmerman/JLECmd> is the Command Line wrapper for the JumpList library

### Blog Posts

#### Official Blog Posts

Blog posts from Eric Zimmerman’s blog, Binary Foray:

* <https://binaryforay.blogspot.com/2016/02/jump-lists-in-depth-understand-format.html>
* <https://binaryforay.blogspot.com/2016/03/introducing-jlecmd.html>
* <https://binaryforay.blogspot.com/2016/03/pecmd-lecmd-and-jlecmd-updated.html>
* <https://binaryforay.blogspot.com/2016/04/lecmd-and-jlecmd-updated.html>
* <https://binaryforay.blogspot.com/2016/09/jlecmd-v0960-released.html>

#### Community Resources

* Links to blog posts go here

### Download RECmd

RECmd can be downloaded from <https://ericzimmerman.github.io/#!index.md>
