# SrumECmd

## SrumECmd Introduction

SrumECmd is a tool created by Eric Zimmerman used to parse the SRUM database. The SRUM database is located at `C:\Windows\System32\sru\SRUDB.dat` and serves as the backend for Windows Task Manager.

### SrumECmd Use Cases

#### Law Enforcement

For those in Law Enforcement, this tool is useful for parsing the SRUM database which can provide another source of program execution for media players, photo viewers, etc. Additionally, being able to see Bytes Read and Bytes Written by various programs may help provide insight as to the size of files certain applications were handling. This may be important relating to crimes involving contraband multimedia files. Additionally, for P2P cases, Bytes Sent and Bytes Received artifacts can prove to be crucial datapoints for the purpose of the investigation.

#### Private Sector

For those in the Private Sector, this tool is useful for parsing the SRUM database which can provide another source of program execution for potentially malicious executables. Additionally, Bytes Sent and Bytes Received can sometimes be the only indicator of data exfiltration in the instance of a ransomware case. If a case is known to involve data exfiltration, the SRUM database should be a mandatory artifact to parse and analyze so long as the suspected data exfiltration occurred within the 30 days of when the SRUM database was parsed.

{pagebreak}

## SrumECmd Switches

In a PowerShell window, running `.\SrumECmd.exe` will provide the following options when running JLECmd:

{line-numbers:false}
```powershell
Description:
  SrumECmd version 0.5.1.0

  Author: Eric Zimmerman (saericzimmerman@gmail.com)
  https://github.com/EricZimmerman/Srum

  Examples: SrumECmd.exe -f "C:\Temp\SRUDB.dat" -r "C:\Temp\SOFTWARE" --csv "C:\Temp\"
            SrumECmd.exe -f "C:\Temp\SRUDB.dat" --csv "c:\temp"
            SrumECmd.exe -d "C:\Temp" --csv "c:\temp"

            Short options (single letter) are prefixed with a single dash. Long commands are prefixed
  with two dashes


Usage:
  SrumECmd [options]

Options:
  -f <f>                  SRUDB.dat file to parse
  -r <r>                  SOFTWARE hive to process. This is optional, but recommended
  -d <d>                  Directory to recursively process, looking for SRUDB.dat and SOFTWARE
                          hive. This mode is primarily used with KAPE so both SRUDB.dat and
                          SOFTWARE hive can be located
  --csv <csv> (REQUIRED)  Directory to save CSV formatted results to. Be sure to include the full
                          path in double quotes
  --dt <dt>               The custom date/time format to use when displaying time stamps. See
                          https://goo.gl/CNVq0k for options
                           [default: yyyy-MM-dd HH:mm:ss]
  --debug                 Show debug information during processing [default: False]
  --trace                 Show trace information during processing [default: False]
  --version               Show version information
  -?, -h, --help          Show help and usage information

```

### Switch Descriptions

#### `-r`

This switch informs the tool to parse a SOFTWARE Registry hive at a specified location. This is beneficial because applications referenced in the SRUM database can be resolved using data stored within the SOFTWARE Registry hive for better results.

Example: `.\SrumECmd.exe -d "C:\temp\SRUMdb" -r "C:\temp\SOFTWAREhive" --csv "C:\temp\SRUMoutput`

Please note, that using the `-d` switch against a directory where a SRUM database and a SOFTWARE Registry hive resides within the subdirectories, SrumECmd will find both without needing to utilize the `-r` switch to specifically point to the SOFTWARE Registry hive.

Example: `.\SrumECmd.exe -d "C:\temp\KapeTriage\tout\C" --csv "C:\temp\SRUMoutput"`

<!-- All other switches are covered by eztools_commonswitches.txt - 2022-09-15 -->

{pagebreak}

## SrumECmd Command Examples

### Example SrumECmd Commands

#### Parse a SRUM database at a specified location and a SOFTWARE Registry hive at a specified location and output to CSV to a specified location

{line-numbers:false}
```powershell
SrumECmd.exe -f "C:\Temp\SRUDB.dat" -r "C:\Temp\SOFTWARE" --csv "C:\Temp\"
```

#### Parse a SRUM database and output to CSV to a specified location

{line-numbers:false}
```powershell
SrumECmd.exe -f "C:\Temp\SRUDB.dat" --csv "c:\temp"
```

#### Process a specified location looking for a SRUM database and/or SOFTWARE Registry hive to parse and output to CSV to a specified location

{line-numbers:false}
```powershell
SrumECmd.exe -d "C:\Temp" --csv "c:\temp"
```

{pagebreak}

## SrumECmd Output

### Analyzing SrumECmd Output - CSV

SrumECmd will produce the following CSVs:

* `%timestamp%_SrumECmd_AppResourceUseInfo_Output.csv`
* `%timestamp%_SrumECmd_EnergyUsage_Output.csv`
* `%timestamp%_SrumECmd_NetworkConnections_Output.csv`
* `%timestamp%_SrumECmd_NetworkUsages_Output.csv`
* `%timestamp%_SrumECmd_PushNotifications_Output.csv`
* `%timestamp%_SrumECmd_Unknown312_Output.csv`
* `%timestamp%_SrumECmd_UnknownD8F_Output.csv`

`%timestamp%` will look something similar to this: `20220904032628`

#### `%timestamp%_SrumECmd_AppResourceUseInfo_Output.csv`

This output can be useful for seeing which applications were running at a given time.

#### `%timestamp%_SrumECmd_NetworkUsages_Output.csv`

This output can be useful for seeing which applications were sending and receiving data. This is helpful in Incident Response engagements where data exfiltration is an important part of the mission for examiners.

{pagebreak}

## SrumECmd Sample Data

Sample SRUM database artifacts can be found at the [DFIRArtifactMuseum](https://github.com/AndrewRathbun/DFIRArtifactMuseum/tree/main/Windows/SRUM).

{pagebreak}

## SrumECmd References

### Associated GitHub Repositories

* <https://github.com/EricZimmerman/Srum> is the GitHub repository for SrumECmd

### Blog Posts

#### Community Resources

* [AboutDFIR - App Timeline Provider – SRUM Database](https://aboutdfir.com/app-timeline-provider-srum-database/)

### Download SrumECmd

SrumECmd can be downloaded from <https://ericzimmerman.github.io/#!index.md>

### SRUM Sample Data

Sample SRUM artifacts can be found at the [DFIRArtifactMuseum](https://github.com/AndrewRathbun/DFIRArtifactMuseum/tree/main/Windows/SRUM).
